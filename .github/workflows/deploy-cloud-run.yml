name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

env:
  GCP_REGION: us-central1
  BACKEND_SERVICE_NAME: chatkit-backend
  FRONTEND_SERVICE_NAME: chatkit-frontend

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build backend image
        run: |
          cd backend
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/backend:${{ github.sha }} .
          docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/backend:${{ github.sha }} \
                     ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/backend:latest

      - name: Push backend image
        run: |
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/backend:${{ github.sha }}
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/backend:latest

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/backend:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --timeout=300 \
            --set-secrets="OPENAI_API_KEY=openai-api-key:latest" \
            --set-env-vars="ENVIRONMENT=production,GIT_SHA=${{ github.sha }}" \
            --port=8080

      - name: Get backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

    outputs:
      backend-url: ${{ steps.backend-url.outputs.url }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build frontend image
        run: |
          cd frontend
          docker build \
            --build-arg VITE_CHATKIT_API_URL="${{ needs.deploy-backend.outputs.backend-url }}" \
            --build-arg VITE_FACTS_API_URL="${{ needs.deploy-backend.outputs.backend-url }}" \
            --build-arg VITE_CHATKIT_API_DOMAIN_KEY="${{ secrets.CHATKIT_DOMAIN_KEY }}" \
            -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/frontend:${{ github.sha }} .
          docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/frontend:${{ github.sha }} \
                     ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/frontend:latest

      - name: Push frontend image
        run: |
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/frontend:${{ github.sha }}
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/frontend:latest

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
            --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/chatkit-images/frontend:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=256Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --timeout=60 \
            --set-env-vars="BACKEND_URL=${{ needs.deploy-backend.outputs.backend-url }},GIT_SHA=${{ github.sha }}" \
            --port=8080

      - name: Get frontend URL
        id: frontend-url
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend deployed to: $FRONTEND_URL"

    outputs:
      frontend-url: ${{ steps.frontend-url.outputs.url }}

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]

    steps:
      - name: Test backend health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy-backend.outputs.backend-url }}/health)
          if [ $response -eq 200 ]; then
            echo "✓ Backend health check passed"
          else
            echo "✗ Backend health check failed with status $response"
            exit 1
          fi

      - name: Test frontend health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy-frontend.outputs.frontend-url }}/health)
          if [ $response -eq 200 ]; then
            echo "✓ Frontend health check passed"
          else
            echo "✗ Frontend health check failed with status $response"
            exit 1
          fi

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend URL**: ${{ needs.deploy-backend.outputs.backend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend URL**: ${{ needs.deploy-frontend.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
